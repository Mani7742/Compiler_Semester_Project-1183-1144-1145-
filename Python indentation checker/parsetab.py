
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOLON COMMA DEDENT ELSE EQEQ EQUALS FOR IF IN INDENT LPAREN NAME NEWLINE NUMBER PRINT RANGE RPARENprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : simple_stmt NEWLINE\n                 | compound_stmt\n                 | NEWLINEsimple_stmt : assignment\n                   | print_stmtassignment : NAME EQUALS exprprint_stmt : PRINT LPAREN expr RPARENexpr : NAMEexpr : NUMBERexpr : expr EQEQ exprcompound_stmt : IF expr COLON NEWLINE INDENT statement_list DEDENT\n                     | ELSE COLON NEWLINE INDENT statement_list DEDENT\n                     | FOR NAME IN RANGE LPAREN NUMBER RPAREN COLON NEWLINE INDENT statement_list DEDENT'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,14,15,17,18,19,23,27,30,31,33,34,35,37,38,40,42,44,45,46,],[5,5,-2,15,-6,-5,-7,-8,-3,-4,-11,-12,25,29,-9,-13,5,-10,5,5,5,-15,-14,43,5,5,-16,]),'IF':([0,2,3,5,6,14,15,31,34,35,37,38,40,44,45,46,],[9,9,-2,-6,-5,-3,-4,9,9,9,9,-15,-14,9,9,-16,]),'ELSE':([0,2,3,5,6,14,15,31,34,35,37,38,40,44,45,46,],[10,10,-2,-6,-5,-3,-4,10,10,10,10,-15,-14,10,10,-16,]),'FOR':([0,2,3,5,6,14,15,31,34,35,37,38,40,44,45,46,],[11,11,-2,-6,-5,-3,-4,11,11,11,11,-15,-14,11,11,-16,]),'NAME':([0,2,3,5,6,9,11,14,15,21,22,24,31,34,35,37,38,40,44,45,46,],[12,12,-2,-6,-5,17,20,-3,-4,17,17,17,12,12,12,12,-15,-14,12,12,-16,]),'PRINT':([0,2,3,5,6,14,15,31,34,35,37,38,40,44,45,46,],[13,13,-2,-6,-5,-3,-4,13,13,13,13,-15,-14,13,13,-16,]),'$end':([1,2,3,5,6,14,15,38,40,46,],[0,-1,-2,-6,-5,-3,-4,-15,-14,-16,]),'DEDENT':([3,5,6,14,15,35,37,38,40,45,46,],[-2,-6,-5,-3,-4,38,40,-15,-14,46,-16,]),'NUMBER':([9,21,22,24,36,],[18,18,18,18,39,]),'COLON':([10,16,17,18,30,41,],[19,23,-11,-12,-13,42,]),'EQUALS':([12,],[21,]),'LPAREN':([13,32,],[22,36,]),'EQEQ':([16,17,18,27,28,30,],[24,-11,-12,24,24,24,]),'RPAREN':([17,18,28,30,39,],[-11,-12,33,-13,41,]),'IN':([20,],[26,]),'INDENT':([25,29,43,],[31,34,44,]),'RANGE':([26,],[32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,31,34,44,],[2,35,37,45,]),'statement':([0,2,31,34,35,37,44,45,],[3,14,3,3,14,14,3,14,]),'simple_stmt':([0,2,31,34,35,37,44,45,],[4,4,4,4,4,4,4,4,]),'compound_stmt':([0,2,31,34,35,37,44,45,],[6,6,6,6,6,6,6,6,]),'assignment':([0,2,31,34,35,37,44,45,],[7,7,7,7,7,7,7,7,]),'print_stmt':([0,2,31,34,35,37,44,45,],[8,8,8,8,8,8,8,8,]),'expr':([9,21,22,24,],[16,27,28,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','pyhton_indentation_checker.py',120),
  ('statement_list -> statement','statement_list',1,'p_statement_list','pyhton_indentation_checker.py',124),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','pyhton_indentation_checker.py',125),
  ('statement -> simple_stmt NEWLINE','statement',2,'p_statement','pyhton_indentation_checker.py',129),
  ('statement -> compound_stmt','statement',1,'p_statement','pyhton_indentation_checker.py',130),
  ('statement -> NEWLINE','statement',1,'p_statement','pyhton_indentation_checker.py',131),
  ('simple_stmt -> assignment','simple_stmt',1,'p_simple_stmt','pyhton_indentation_checker.py',135),
  ('simple_stmt -> print_stmt','simple_stmt',1,'p_simple_stmt','pyhton_indentation_checker.py',136),
  ('assignment -> NAME EQUALS expr','assignment',3,'p_assignment','pyhton_indentation_checker.py',140),
  ('print_stmt -> PRINT LPAREN expr RPAREN','print_stmt',4,'p_print_stmt','pyhton_indentation_checker.py',145),
  ('expr -> NAME','expr',1,'p_expr_name','pyhton_indentation_checker.py',149),
  ('expr -> NUMBER','expr',1,'p_expr_number','pyhton_indentation_checker.py',155),
  ('expr -> expr EQEQ expr','expr',3,'p_expr_eqeq','pyhton_indentation_checker.py',159),
  ('compound_stmt -> IF expr COLON NEWLINE INDENT statement_list DEDENT','compound_stmt',7,'p_compound_stmt','pyhton_indentation_checker.py',165),
  ('compound_stmt -> ELSE COLON NEWLINE INDENT statement_list DEDENT','compound_stmt',6,'p_compound_stmt','pyhton_indentation_checker.py',166),
  ('compound_stmt -> FOR NAME IN RANGE LPAREN NUMBER RPAREN COLON NEWLINE INDENT statement_list DEDENT','compound_stmt',12,'p_compound_stmt','pyhton_indentation_checker.py',167),
]
